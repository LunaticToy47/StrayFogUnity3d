using System.Collections.Generic;
using UnityEngine;
/// <summary>
/// FMS状态机映射
/// </summary>
public sealed class FMSMachineMaping
{	
	#region MachineForLayer映射
	/// <summary>
	/// MachineForLayer映射
	/// </summary>
	readonly static Dictionary<int, List<int>> mMachineForLayerMaping = new Dictionary<int, List<int>>() {#MACHINEFORLAYER#
		{ enFMSMachine.#MACHINE#,new List<int> { #LISTLAYER#enFMSLayer.#LAYER#,#LISTLAYER# } },#MACHINEFORLAYER#
	};
	#endregion

	#region LayerForMachine映射
	/// <summary>
	/// LayerForMachine映射
	/// </summary>
	readonly static Dictionary<int, List<int>> mLayerForMachineMaping = new Dictionary<int, List<int>>() {#LAYERFORMACHINE#
		{ enFMSLayer.#LAYER#,new List<int> { #LISTMACHINE#enFMSMachine.#MACHINE#,#LISTMACHINE# } },#LAYERFORMACHINE#
	};
	#endregion

	#region StateForLayer映射
	/// <summary>
	/// StateForLayer映射
	/// </summary>
	readonly static Dictionary<int, List<int>> mStateForLayerMaping = new Dictionary<int, List<int>>() {#STATEFORLAYER#
		{ enFMSState.#STATE#,new List<int> { #LISTLAYER#enFMSLayer.#LAYER#,#LISTLAYER# } },#STATEFORLAYER#
	};
	#endregion

	#region LayerForState映射
	/// <summary>
	/// LayerForState映射
	/// </summary>
	readonly static Dictionary<int, List<int>> mLayerForStateMaping = new Dictionary<int, List<int>>() {#LAYERFORSTATE#
		{ enFMSLayer.#LAYER#,new List<int> { #LISTSTATE#enFMSState.#STATE#,#LISTSTATE# } },#LAYERFORSTATE#
	};
	#endregion

	#region StateForMachine映射
	/// <summary>
	/// StateForMachine映射
	/// </summary>
	readonly static Dictionary<int, List<int>> mStateForMachineMaping = new Dictionary<int, List<int>>() {#STATEFORMACHINE#
		{ enFMSState.#STATE#,new List<int> { #LISTMACHINE#enFMSMachine.#MACHINE#,#LISTMACHINE#} },#STATEFORMACHINE#
	};
	#endregion

	#region MachineForState映射
	/// <summary>
	/// MachineForState映射
	/// </summary>
	readonly static Dictionary<int, List<int>> mMachineForStateMaping = new Dictionary<int, List<int>>() {#MACHINEFORSTATE#
		{ enFMSMachine.#MACHINE#,new List<int> { #LISTSTATE#enFMSState.#STATE#,#LISTSTATE#} },#MACHINEFORSTATE#
	};
	#endregion

	#region IsMachine 是否是指定状态机
	/// <summary>
	/// 是否是指定状态机
	/// </summary>
	/// <param name="_animator">阿凡达</param>
	/// <param name="_machineNameHash">状态机NameHash值</param>
	/// <returns>true:是,false:否</returns>
	public static bool IsMachine(Animator _animator, int _machineNameHash)
	{
		bool result = false;
		if (mMachineForLayerMaping.ContainsKey(_machineNameHash))
		{
			if (mMachineForLayerMaping[_machineNameHash].Count > 0)
			{
				AnimatorStateInfo info;
				foreach (int layer in mMachineForLayerMaping[_machineNameHash])
				{
					info = _animator.GetCurrentAnimatorStateInfo(layer);
					if (mStateForMachineMaping.ContainsKey(info.shortNameHash))
					{
						foreach (int machineNameHash in mStateForMachineMaping[info.shortNameHash])
						{
							result |= _machineNameHash == machineNameHash;
							if (result)
							{
								break;
							}
						}
					}
					if (result)
					{
						break;
					}                    
				}
			}
		}
		return result;
	}
	#endregion

	#region IsState 是否是指定状态
	/// <summary>
	/// 是否是指定状态
	/// </summary>
	/// <param name="_animator">阿凡达</param>
	/// <param name="_stateNameHash">状态NameHash值</param>
	/// <returns>true:是,false:否</returns>
	public static bool IsState(Animator _animator,int _stateNameHash)
	{
		bool result = false;
		if (mStateForLayerMaping.ContainsKey(_stateNameHash))
		{
			if (mStateForLayerMaping[_stateNameHash].Count > 0)
			{
				AnimatorStateInfo info;
				foreach (int layer in mStateForLayerMaping[_stateNameHash])
				{
					info = _animator.GetCurrentAnimatorStateInfo(layer);
					result |= _stateNameHash == info.shortNameHash;
					if (result)
					{
						break;
					}
				}
			}
		}
		return result;
	}
	#endregion
}
#region enFMSLayer
/// <summary>
/// Layer层级
/// </summary>
public static class enFMSLayer
{
#ENUMLAYER#
	/// <summary>
	/// #DESC#
	/// </summary>
	[AliasTooltip("#DESC#")]
	public const int #NAME# = #VALUE#;
#ENUMLAYER#
}
#endregion
#region enFMSMachine
/// <summary>
/// 状态机
/// </summary>
public static class enFMSMachine
{
#ENUMMACHINE#
	/// <summary>
	/// #MACHINEDESC#
	/// </summary>
	[AliasTooltip("#MACHINEDESC#")]
	public const int #MACHINE# = #VALUE#;
#ENUMMACHINE#
}
#endregion

#region enFMSState
/// <summary>
/// 状态
/// </summary>
public static class enFMSState
{
#ENUMSTATE#
	/// <summary>
	/// #STATEDESC#
	/// </summary>
	[AliasTooltip("#STATEDESC#")]
	public const int #STATE# = #VALUE#;
#ENUMSTATE#
}
#endregion
#region enFMSParameter
/// <summary>
/// FMS参数
/// </summary>
public static class enFMSParameter
{
#ENUMPARAMETER#
	/// <summary>
	/// #NAME#
	/// </summary>
	public const int #NAME# = #VALUE#;
#ENUMPARAMETER#
}
#endregion
